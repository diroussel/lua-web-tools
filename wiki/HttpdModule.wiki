#summary HTTPD module API

= Introduction =

This page describes the functions provided by the HTTPD Module.

= Import =

{{{
require "httpd"
}}}

= Functions =

== `httpd.pairs (apr_table)` ==

Returns three values so that the construction

{{{
for key, value in httpd.pairs(t) do body end
}}}

will iterate over all key-value pairs in the passed APR table. This function is used with the header tables of the `request` value and the `args` value.

== `httpd.set_content_type (content_type)` ==

Sets the response content type to `content_type`.

== `httpd.add_cookie (name [, value [, expires [, path [, domain [, secure [, httponly]]]]]])` ==

Adds a cookie `name`. If `value` is a string, it represents the value of the cookie, otherwise the value of the cookie is the empty string. If `expires` is a non-negative number, it represents the expiry of the cookie as a Unix timestamp, otherwise the cookie is valid for the session only. If `path` and `domain` are string values, they represent the path and domain of the cookie respectively, otherwise the cookie is added without an explicit path or domain. If `secure` and `httponly` are `true` when evaluated as boolean values, they indicate that the cookie must only be transmitted on secure connections and that the cookie is unavailable to client-side scripting respectively, otherwise the cookie is added without these security restrictions.

== `httpd.write_template (filename [, flags])` ==

Writes a template from a file referenced by `filename`. `flags` is a string with each character modifying the template writing process as follows: 

  * `p`: parse the template; if absent, the template is written as is
  * `x`: escape XML reserved characters in substitutions
  * `u`: escape URL reserved characters in substitutions
  * `n`: substitute an empty string for `nil` expressions
  * `e`: substitute an empty string for expressions with a runtime error

== `httpd.escape_xml (string)` ==

Escapes XML reserved characters in a string and returns the escaped string. More specifically, the following characters are escaped:

|| *Character* || *Escape* ||
|| & || &quot; ||
|| `"` || `&quot;` ||
|| `<` || `&lt;` ||
|| `>` || `&gt;` ||

== `httpd.escape_url (string)` == 

== `httpd.input` ==

== `httpd.output` ==