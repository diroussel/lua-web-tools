#summary IS module API

= Introduction =

This page describes the functions provided by the IS module. This IS module supports the access to information systems.

= Import =

{{{
require "is"
}}}

== MySQL ==

{{{
require "is.mysql"
}}}


== TDS (Sybase, SQL Server) ==

{{{
require "is.tds"
}}}

== SQLite3 ==

{{{
require "is.sqlite3"
}}}

= Functions =

== `is.connect (table)` ==

Creates and returns a connection to an information system using the arguments from `table`. `table` must contain a field `driver` that determines to type of information system to connect to. Other required fields depend on the driver and are documented in the respective sections. The function returns a connection if it is successful and raises an error otherwise.

== `connection:close()` ==

Explicitly closes the connection. Connections are closed implcitly when they are garbage collected.

== `connection:execute(sql, ...)` ==

Prepares the supplied SQL statement which may contain binding variables represented by `?`, and then binds the values following the SQL statement. If the SQL statement modifies rows (`INSERT`, `DELETE`, `UPDATE`), the function returns the number of rows affected; if the SQL statement returns data from the information system, the function returns no value.

== `connection:read([read_mode])` ==

Reads the next row produced by a the previously executed SQL statement and returns that row as a table, or `nil` if there are no more rows. If `read_mode` is absent or `name`, the tables keys are column names; if `read_mode` is `index`, the table keys are column numbers (1-based). 

== `connection:rows([read_mode])` ==

Returns three values such that the production

{{{
for row in connection:rows([read_mode]) do body end
}}}

iterates over all rows produced by a previously executed SQL statement. `read_mode` has the effect as in `connection:read()`.

== `connection:metadata(meta_data)` ===

Returns meta data from a previously executed SQL statement that produces rows. The function returns a table where keys are column numbers (1-based) and values depend on `meta_data` as follows:

|| *`meta_data`* || *Description* ||
||`name`||Column name||
||`type`||Column data type expressed in the type system of the information system||
||`length`||Column length or size||
||`scale`||Column scale||
||`luatype`||Mapped Lua type, such as `string`, `number`, or `boolean`||

The function must not be invoked after `connection:read()` or the iterator function returned by `conection:rows()` have returned `nil`.

== `connection:intransaction()` ==

Returns whether there is an open transation on the connection.

== `connection:begin()` ==

Begins a transaction on the connection. The function raises an error if there already is an open transaction.

== `connection:commit()` ==

Commits an open transaction on the connection. The function raises an error if there is no open transaction.

== `conneection:rollback()` ==

Rolls back an open transaction on the connection. The function raises an error if there is no open transaction.
